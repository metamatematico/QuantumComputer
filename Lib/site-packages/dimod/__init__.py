# Copyright 2018 D-Wave Systems Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.


# start delvewheel patch
def _delvewheel_patch_1_5_2():
    import ctypes
    import os
    import platform
    import sys
    libs_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, 'dimod.libs'))
    is_conda_cpython = platform.python_implementation() == 'CPython' and (hasattr(ctypes.pythonapi, 'Anaconda_GetVersion') or 'packaged by conda-forge' in sys.version)
    if sys.version_info[:2] >= (3, 8) and not is_conda_cpython or sys.version_info[:2] >= (3, 10):
        if os.path.isdir(libs_dir):
            os.add_dll_directory(libs_dir)
    else:
        load_order_filepath = os.path.join(libs_dir, '.load-order-dimod-0.12.14')
        if os.path.isfile(load_order_filepath):
            with open(os.path.join(libs_dir, '.load-order-dimod-0.12.14')) as file:
                load_order = file.read().split()
            for lib in load_order:
                lib_path = os.path.join(os.path.join(libs_dir, lib))
                kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)
                if os.path.isfile(lib_path) and not kernel32.LoadLibraryExW(ctypes.c_wchar_p(lib_path), None, 0x00000008):
                    raise OSError('Error loading {}; {}'.format(lib, ctypes.FormatError(ctypes.get_last_error())))


_delvewheel_patch_1_5_2()
del _delvewheel_patch_1_5_2
# end delvewheel patch

# version is used by serialization below so we need it before everything
__version__ = '0.12.14'

from dimod.constrained import *
import dimod.constrained

from dimod.core import *
import dimod.core

from dimod.cyutilities import *

from dimod.reference import *
import dimod.reference

from dimod.roof_duality import fix_variables

from dimod.binary import *
import dimod.binary

from dimod.discrete import *

import dimod.testing

from dimod.converters import *

import dimod.decorators

import dimod.generators

from dimod.exceptions import *
import dimod.exceptions

from dimod.higherorder import make_quadratic, make_quadratic_cqm, reduce_binary_polynomial, poly_energy, poly_energies, BinaryPolynomial
import dimod.higherorder

from dimod.package_info import __version__, __author__, __authoremail__, __description__

from dimod.quadratic import *
import dimod.quadratic

from dimod.traversal import *

from dimod.sampleset import *

from dimod.serialization.format import set_printoptions

import dimod.lp

from dimod.utilities import *
import dimod.utilities

from dimod.vartypes import *

# flags for some global features
REAL_INTERACTIONS = False
